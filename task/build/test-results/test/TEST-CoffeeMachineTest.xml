<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="CoffeeMachineTest" tests="1" skipped="0" failures="1" errors="0" timestamp="2020-09-16T15:18:49" hostname="DESKTOP-7TN3LOB" time="0.106">
  <properties/>
  <testcase name="start" classname="CoffeeMachineTest" time="0.106">
    <failure message="java.lang.AssertionError: Wrong answer in test #1&#10;&#10;There should be two lines with &quot;money&quot;, found: 0&#10;&#10;Please find below the output of your program during this failed test.&#10;Note that the '&gt;' character indicates the beginning of the input line.&#10;&#10;---&#10;&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&gt; remaining&#10;&#10;The coffee machine has:&#10;400 ml of water&#10;540 ml of milk&#10;120 g of coffee beans&#10;9 disposable cups&#10;550$&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&gt; buy&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:&#10;&gt; 2&#10;I have enough resources, making you a coffee!&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&gt; buy&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:&#10;&gt; 2&#10;Not enough ingredients to make a latte.&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&gt; fill&#10;Write how many ml of water do you want to add:&#10;&gt; 1000&#10;Write how many ml of milk do you want to add:&#10;&gt; 0&#10;Write how many grams of coffee beans do you want to add:&#10;&gt; 0&#10;Write how many disposable cups do you want to add:&#10;&gt; 0&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&gt; buy&#10;What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:&#10;&gt; 2&#10;I have enough resources, making you a coffee!&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&gt; take&#10;I gave you 564&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&gt; remaining&#10;&#10;The coffee machine has:&#10;700 ml of water&#10;390 ml of milk&#10;80 g of coffee beans&#10;7 disposable cups&#10;0$&#10;&#10;Write action (buy, fill, take, remaining, exit):&#10;&gt; exit" type="java.lang.AssertionError">java.lang.AssertionError: Wrong answer in test #1

There should be two lines with &quot;money&quot;, found: 0

Please find below the output of your program during this failed test.
Note that the '&gt;' character indicates the beginning of the input line.

---


Write action (buy, fill, take, remaining, exit):
&gt; remaining

The coffee machine has:
400 ml of water
540 ml of milk
120 g of coffee beans
9 disposable cups
550$

Write action (buy, fill, take, remaining, exit):
&gt; buy
What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:
&gt; 2
I have enough resources, making you a coffee!

Write action (buy, fill, take, remaining, exit):
&gt; buy
What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:
&gt; 2
Not enough ingredients to make a latte.

Write action (buy, fill, take, remaining, exit):
&gt; fill
Write how many ml of water do you want to add:
&gt; 1000
Write how many ml of milk do you want to add:
&gt; 0
Write how many grams of coffee beans do you want to add:
&gt; 0
Write how many disposable cups do you want to add:
&gt; 0

Write action (buy, fill, take, remaining, exit):
&gt; buy
What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:
&gt; 2
I have enough resources, making you a coffee!

Write action (buy, fill, take, remaining, exit):
&gt; take
I gave you 564

Write action (buy, fill, take, remaining, exit):
&gt; remaining

The coffee machine has:
700 ml of water
390 ml of milk
80 g of coffee beans
7 disposable cups
0$

Write action (buy, fill, take, remaining, exit):
&gt; exit
	at org.junit.Assert.fail(Assert.java:88)
	at org.hyperskill.hstest.stage.StageTest.start(StageTest.java:97)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
  </testcase>
  <system-out><![CDATA[?[1;31m
Start test 1?[0m

Write action (buy, fill, take, remaining, exit):
> remaining

The coffee machine has:
400 ml of water
540 ml of milk
120 g of coffee beans
9 disposable cups
550$

Write action (buy, fill, take, remaining, exit):
> buy
What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:
> 2
I have enough resources, making you a coffee!

Write action (buy, fill, take, remaining, exit):
> buy
What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:
> 2
Not enough ingredients to make a latte.

Write action (buy, fill, take, remaining, exit):
> fill
Write how many ml of water do you want to add:
> 1000
Write how many ml of milk do you want to add:
> 0
Write how many grams of coffee beans do you want to add:
> 0
Write how many disposable cups do you want to add:
> 0

Write action (buy, fill, take, remaining, exit):
> buy
What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:
> 2
I have enough resources, making you a coffee!

Write action (buy, fill, take, remaining, exit):
> take
I gave you 564

Write action (buy, fill, take, remaining, exit):
> remaining

The coffee machine has:
700 ml of water
390 ml of milk
80 g of coffee beans
7 disposable cups
0$

Write action (buy, fill, take, remaining, exit):
> exit
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
